# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

commands:
  install-bazel:
    description: "Install bazel"
    parameters:
      platform:
        type: string
        default: "x86_64"
      version:
        type: string
        default: "5.1.1"
    steps:
      - run: 
          name: Install bazel
          command: |
            sudo wget -q https://github.com/bazelbuild/bazel/releases/download/<< parameters.version >>/bazel-<< parameters.version >>-linux-<< parameters.platform >> -O /usr/bin/bazel
            sudo chmod a+x /usr/bin/bazel
    
  create-env:
    description: "Install dependencies for Torch-TensorRT"
    parameters:
      os: 
        type: string
        default: "ubuntu2004"
      platform:
        type: string
        default: "x86_64"
      cudnn-version: 
        type: string
        default: "8.2.1"
      cudnn-pkg-name:
        type: string
        default: "8.2.1.*-1+cuda11.3"
      trt-version-short:
        type: string
        default: "8.2.4"
      trt-pkg-name:
        type: string
        default: "8.2.4-1+cuda11.4"
      bazel-version:
        type: string
        default: "5.1.1"
      bazel-platform:
        type: string
        default: "x86_64"
    steps: 
      - run:
          name: Install cudnn + tensorrt
          command: |
            cd ~

            wget https://developer.download.nvidia.com/compute/cuda/repos/<< parameters.os >>/<< parameters.platform >>/cuda-<< parameters.os >>.pin
            sudo mv cuda-<< parameters.os >>.pin /etc/apt/preferences.d/cuda-repository-pin-600
            sudo apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/<< parameters.os >>/<< parameters.platform >>/7fa2af80.pub
            sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 536F8F1DE80F6A35
            sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys A4B469963BF863CC
            sudo add-apt-repository "deb https://developer.download.nvidia.com/compute/cuda/repos/<< parameters.os >>/<< parameters.platform >>/ /"
            sudo apt-get update
            sudo apt-get install libcudnn8=<< parameters.cudnn-pkg-name >>
            sudo apt-get install libcudnn8-dev=<< parameters.cudnn-pkg-name >>

            sudo apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/<< parameters.os >>/<< parameters.platform >>/3bf863cc.pub
            sudo add-apt-repository "deb https://developer.download.nvidia.com/compute/cuda/repos/<< parameters.os >>/<< parameters.platform >>/ /"
            sudo apt-get update

            sudo apt-get install libnvinfer8=<< parameters.trt-pkg-name >> libnvinfer-plugin8=<< parameters.trt-pkg-name >> libnvinfer-dev=<< parameters.trt-pkg-name >> libnvinfer-plugin-dev=<< parameters.trt-pkg-name >>
            # check available version, apt list libnvinfer8 -a
      - install-bazel:
          platform: << parameters.bazel-platform >>
          version: << parameters.bazel-version >>        

  create-py-env:
      description: "Install python dependencies"
      parameters:
        trt-version-long:
          type: string
          default: "8.2.4.2"
      steps:
        - run:
            name: Set up python environment
            command: |
              pip3 install --upgrade pip
              pip3 install wheel setuptools
              pip3 install nvidia-pyindex
              pip3 install tabulate
              pip3 install nvidia-tensorrt==<< parameters.trt-version-long >>
              pip3 install pytest parameterized expecttest nox
            # install torch_tensorrt

  install-torch-from-index:
    description: "Install python dependencies"
    parameters:
      torch-build:
        type: string
        default: "1.11.0+cu113"
      torch-build-index:
        type: string
        default: "https://download.pytorch.org/whl/cu113"
    steps:
      - run:
          name: Install Torch
          command: |
            pip3 install --upgrade pip
            pip3 install --pre torch==<< parameters.torch-build >>  torchvision torchaudio --extra-index-url << parameters.torch-build-index >>

  build-py:
    description: "Build the torch-tensorrt python release"
    steps:
      - run:
          name: Build torch-tensorrt python release
          command: |
            mv WORKSPACE.ci WORKSPACE
            cd py
            python3 -m pip install wheel setuptools
            python3 -m pip install pybind11==2.6.2
            python3 setup.py bdist_wheel
            python3 setup.py install
            mkdir -p /tmp/dist/builds
            cp dist/* /tmp/dist/builds

  build-py-fx-only:
    description: "Build the torch-tensorrt python release with only the fx backend"
    steps:
      - run:
          name: Build torch-tensorrt python release with only the fx backend
          command: |
            mv WORKSPACE.ci WORKSPACE
            cd py
            python3 -m pip install wheel setuptools
            python3 -m pip install pybind11==2.6.2
            python3 setup.py bdist_wheel --fx-only
            python3 setup.py install --fx-only
            mkdir -p /tmp/dist/builds
            cp dist/* /tmp/dist/builds

  dump-test-env:
    description: "Dump the test env to console"
    steps:
      - run:
          name: GPU Config
          command: |
            nvidia-smi

      - run:
          name: Test torch
          command: |
            python3 -c "import torch; print(torch.cuda.is_available()); print(torch.cuda.device_count())"

  pull-test-models:
    description: "Pull the test model set"
    steps:
      - run:
          name: Pull test models
          environment:
            USE_HOST_DEPS: "1"
          command: |
            nox -s download_test_models-3.9

  test-ts-core:
    description: "Test torchscript backend c++ api"
    steps:
      - pull-test-models
      - run: mkdir -p /tmp/artifacts
      - run:
          name: Run core / C++ tests
          environment:
            LD_LIBRARY_PATH: "~/project/bazel-project/external/libtorch_pre_cxx11_abi/lib/:~/project/bazel-project/external/cudnn/lib64/:~/project/bazel-project/external/tensorrt/lib/:/usr/local/cuda/lib64/:$LD_LIBRARY_PATH"
          command: |
            pwd
            ls
            set -e
            mv WORKSPACE.ci WORKSPACE
            bazel test //tests --test_arg=--gtest_output=xml:/tmp/artifacts/test_results/ --jobs 2 --config ci_testing --config pre_cxx11_abi
      - store_test_results:
          path: /tmp/artifacts

  test-ts-py-api:
    description: "Run L0 torch-tensorrt python tests"
    parameters:
        trt-version-long:
          type: string
          default: "8.2.4.2"
    steps:
      - create-py-env:
          trt-version-long: << parameters.trt-version-long >>
      - pull-test-models
      - run:
          name: Run L0 torch-tensorrt python tests
          command: |
            nox -s l0_api_tests-3.9

  test-fx:
    description: "Test the fx backend"
    steps:
      - run:
          name: Run fx tests
          command: |
            # one fix pending to enable below
            # cd py/torch_tensorrt/fx/test
            # pytest $(find . -name '*.py' | grep -v test_dispatch* | grep -v test_setitem*)

            cd py/torch_tensorrt/fx/test
            pushd converters/acc_op
            pytest
            popd
            pushd passes
            list_passes=$(ls | grep -v test_setitem*)
            pytest $list_passes
            popd
            pushd core
            pytest
            popd
            # pushd quant
            # pytest
            # popd
            pushd tools
            pytest
            popd
            pushd trt_lower
            pytest
            popd
            pushd tracer
            list_tracer=$(ls | grep -v test_dispatch_*)
            pytest $list_tracer
            popd
  
# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build-aarch64-pyt-jetson:
    parameters:
      torch-build:
        type: string
      torch-build-url:
        type: string
    machine:
      image: "ubuntu-2004:current"
    resource_class: arm.xlarge
    steps:
        - checkout
        - create-env:
            os: "ubuntu2004"
            platform: "sbsa"
            cudnn-version: "8.2.1"
            cudnn-pkg-name:  "8.2.1.*-1+cuda11.3"
            trt-version-short:  "8.2.4"
            trt-pkg-name: "8.2.4-1+cuda11.4"
            bazel-version:  "5.1.1"
            bazel-platform: "arm64"
        - run:
            name: Install torch from box
            command: |
              wget << parameters.torch-build-url >> -O << parameters.torch-build >>
              pip3 install --upgrade pip
              pip3 install << parameters.torch-build >>
        - build-py
        - store_artifacts: 
            path: /tmp/dist
            destination: aarch64-pyt-jetson

  build-x86_64-pyt-release:
    parameters:
      torch-build:
        type: string
      torch-build-index:
        type: string
    machine:
      # Primary container image where all steps run.
      # image: nvcr.io/nvidia/tensorrt:22.01-py3 # does not work with customized image
      # https://circleci.com/docs/2.0/configuration-reference#available-linux-gpu-images
      image: ubuntu-2004-cuda-11.4:202110-01
    resource_class: xlarge
    steps:
      - checkout
      - create-env:
          os: "ubuntu2004"
          platform: "x86_64"
          cudnn-version: "8.2.1"
          cudnn-pkg-name:  "8.2.1.*-1+cuda11.3"
          trt-version-short:  "8.2.4"
          trt-pkg-name: "8.2.4-1+cuda11.4"
          bazel-version:  "5.1.1"
          bazel-platform: "x86_64"
      - install-torch-from-index:
          torch-build:  << parameters.torch-build >>
          torch-build-index: << parameters.torch-build-index >>
      - build-py
      - run:
          name: Move to release dir
          command: |
            mkdir -p /tmp/dist/release
            cp -r /tmp/dist/builds/* /tmp/dist/release
      - persist_to_workspace:
          root: /tmp/dist
          paths:
            - release
      - store_artifacts:
          path: /tmp/dist/release
          destination: x86_64-pyt-release
          
  build-x86_64-pyt-nightly:
    parameters:
      torch-build:
        type: string
      torch-build-index:
        type: string
    machine:
      # Primary container image where all steps run.
      # image: nvcr.io/nvidia/tensorrt:22.01-py3 # does not work with customized image
      # https://circleci.com/docs/2.0/configuration-reference#available-linux-gpu-images
      image: ubuntu-2004-cuda-11.4:202110-01
    resource_class: xlarge
    steps:
      - checkout
      - create-env:
          os: "ubuntu2004"
          platform: "x86_64"
          cudnn-version: "8.2.1"
          cudnn-pkg-name:  "8.2.1.*-1+cuda11.3"
          trt-version-short:  "8.2.4"
          trt-pkg-name: "8.2.4-1+cuda11.4"
          bazel-version:  "5.1.1"
          bazel-platform: "x86_64"
      - install-torch-from-index:
          torch-build:  << parameters.torch-build >>
          torch-build-index: << parameters.torch-build-index >>
      - build-py-fx-only
      - run:
          name: Move to nightly dir
          command: |
            mkdir -p /tmp/dist/nightly
            cp -r /tmp/dist/builds/* /tmp/dist/nightly
      - persist_to_workspace:
          root: /tmp/dist
          paths:
            - nightly
      - store_artifacts:
          path: /tmp/dist/nightly
          destination: x86_64-pyt-nightly

  test-x86_64-pyt-release:
    parameters:
      torch-build:
        type: string
      torch-build-index:
        type: string
    machine:
      image: ubuntu-2004-cuda-11.4:202110-01
    resource_class: gpu.nvidia.large
    steps:
      - checkout
      - create-env:
          os: "ubuntu2004"
          platform: "x86_64"
          cudnn-version: "8.2.1"
          cudnn-pkg-name:  "8.2.1.*-1+cuda11.3"
          trt-version-short:  "8.2.4"
          trt-pkg-name: "8.2.4-1+cuda11.4"
          bazel-version:  "5.1.1"
          bazel-platform: "x86_64"
      - create-py-env:
          trt-version-long: "8.2.4.2"
      - install-torch-from-index:
          torch-build:  << parameters.torch-build >>
          torch-build-index: << parameters.torch-build-index >>
      - attach_workspace:
          at: /tmp/dist
      - run:
          name: "Install torch-tensorrt"
          command: pip3 install /tmp/dist/release/* 
      - test-ts-core

  test-x86_64-pyt-nightly:
    parameters:
      torch-build:
        type: string
      torch-build-index:
        type: string
    machine:
      image: ubuntu-2004-cuda-11.4:202110-01
    resource_class: gpu.nvidia.large
    steps:
      - checkout
      - create-py-env:
          trt-version-long: "8.2.4.2"
      - install-torch-from-index:
          torch-build:  << parameters.torch-build >>
          torch-build-index: << parameters.torch-build-index >>
      - attach_workspace:
          at: /tmp/dist/
      - run:
          name: "Install torch-tensorrt"
          command: pip3 install /tmp/dist/nightly/* 
      - test-fx

parameters:
  torch-nightly-build:
    type: string
    default: "1.13.0.dev20220715+cu113"
  torch-nightly-build-index:
    type: string
    default: "https://download.pytorch.org/whl/nightly/cu113"
  torch-release-build:
    type: string
    default: "1.11.0+cu113"
  torch-release-build-index:
    type: string
    default: "https://download.pytorch.org/whl/cu113"
  torch-jetson-build:
    type: string
    default: "torch-1.11.0-cp38-cp38-linux_aarch64.whl"
  torch-jetson-build-url:
    type: string
    default: "https://nvidia.box.com/shared/static/ssf2v7pf5i245fk4i0q926hy4imzs2ph.whl"
    
    
# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - build-aarch64-pyt-jetson:
          torch-build: << pipeline.parameters.torch-jetson-build >>
          torch-build-url: << pipeline.parameters.torch-jetson-build-url >>
          
      - build-x86_64-pyt-release:
          torch-build: << pipeline.parameters.torch-release-build >>
          torch-build-index: << pipeline.parameters.torch-release-build-index >>
      - test-x86_64-pyt-release:
          torch-build: << pipeline.parameters.torch-release-build >>
          torch-build-index: << pipeline.parameters.torch-release-build-index >>
          requires:
            - build-x86_64-pyt-release
            
      - build-x86_64-pyt-nightly:
          torch-build: << pipeline.parameters.torch-nightly-build >>
          torch-build-index: << pipeline.parameters.torch-nightly-build-index >>
      - test-x86_64-pyt-nightly:
          torch-build: << pipeline.parameters.torch-nightly-build >>
          torch-build-index: << pipeline.parameters.torch-nightly-build-index >>
          requires:
            - build-x86_64-pyt-nightly 
    
  on-push:
    jobs:
      - build-aarch64-pyt-jetson:
          torch-build: << pipeline.parameters.torch-jetson-build >>
          torch-build-url: << pipeline.parameters.torch-jetson-build-url >>
          
      - build-x86_64-pyt-release:
          torch-build: << pipeline.parameters.torch-release-build >>
          torch-build-index: << pipeline.parameters.torch-release-build-index >>
      - test-x86_64-pyt-release:
          torch-build: << pipeline.parameters.torch-release-build >>
          torch-build-index: << pipeline.parameters.torch-release-build-index >>
          requires:
            - build-x86_64-pyt-release
            
      - build-x86_64-pyt-nightly:
          torch-build: << pipeline.parameters.torch-nightly-build >>
          torch-build-index: << pipeline.parameters.torch-nightly-build-index >>
      - test-x86_64-pyt-nightly:
          torch-build: << pipeline.parameters.torch-nightly-build >>
          torch-build-index: << pipeline.parameters.torch-nightly-build-index >>
          requires:
            - build-x86_64-pyt-nightly    
       
